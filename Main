import random
from colorama import init as colorama_init
from colorama import Fore
from colorama import Style
colorama_init()


class Card:
    def __init__(self, name: str, rank: int, suit: str):
        self.name = name
        self.rank = rank
        self.suit = suit
class Player:
    bet = 0
    hand = []
    next_to_play = False
    start_round = False
    all_in = False
    wins = False


    def __init__(self, name: str, bank: int, enemy: object):
        self.name = name
        self.bank = bank
        self.enemy = enemy

    def get_cards(self, card1, card2):
        self.hand = [card1, card2]

    def peek_cards(self):
        input(f"Press ENTER when ready. Ensure that {self.enemy.name} is not looking!")
        print(f'{self.hand[0].name}, {self.hand[1].name}.')
        input(f'Press ENTER again to clear the screen.')
        for n in range(1000):
            print()

    def examine_board(self):
        for n in range(100):
            print()
        print(f"****************************************** {self.name}'s TURN ******************************************")
        print()
        if stage == 1: print('Current stage: PREFLOP.')
        if stage == 2:
            print('Current stage: FLOP.')
            print(f'Community cards: {community[0].name}, {community[1].name}, and {community[2].name}.')
        if stage == 3:
            print('Current stage: TURN.')
            print(f'Community cards: {community[0].name}, {community[1].name}, {community[2].name}, and {community[3].name}.')
        if stage == 4:
            print('Current stage: RIVER.')
            print(f'Community cards: {community[0].name}, {community[1].name}, {community[2].name}, {community[3].name}, and {community[4].name}.')
        print(f'Your chips: {self.bank}')
        print(f"Opponent's chips: {self.enemy.bank}")
        print(f"Pot size: {pot}")

    def start(self):
        global pot
        self.examine_board()
        print(f'{self.name} to start the round.')
        choice = str.lower(input(f"{self.name}, would you like to PEEK at your cards, CHECK or BET?")[0])
        while choice != 'p' and choice != 'c' and choice != 'b':
            choice = str.lower(input("Unrecognized command. Would you like to PEEK at your cards, CHECK or BET?")[0])
        if choice == 'p':
            self.peek_cards()
            self.start()
        if choice == 'c':
            self.enemy.check_bet()
        if choice == 'b':
            self.bet = int(input('How much would you like to bet? '))
            while self.bet <= 0:
                self.bet = int(input('You must bet a positive number of chips. '))
            while self.bet > self.bank:
                self.bet = int(input(f'You only have {self.bank} chips! '))
            while self.bet > self.enemy.bank:
                self.bet = int(input(f"You cannot bet more than your opponent's {self.enemy.bank} remaining chips!"))
            self.bank -= self.bet
            pot += self.bet
            self.enemy.call_bet()

    def start_blind(self):
        global pot
        self.enemy.bet = blind
        self.examine_board()
        print(f'{self.name} to start the round.')
        choice = str.lower(input(f"{self.name}, would you like to PEEK at your cards, CALL the blind of {blind} chips, RAISE or FOLD?")[0])
        while choice != 'p' and choice != 'c' and choice != 'r' and choice != 'f':
            choice = str.lower(input("Unrecognized command. Would you like to PEEK at your cards, CALL the blind, RAISE or FOLD?")[0])
        if choice == 'p':
            self.peek_cards()
            self.start_blind()
        if choice == 'f':
            print(f'{self.name} has folded!')
            self.enemy.award_fold()
        if choice == 'c':
            self.bank -= self.enemy.bet
            pot += self.enemy.bet
            self.enemy.bet = 0
            self.enemy.check_bet()
        if choice == 'r':
            self.bet = int(input(f"You will see the blind of {self.enemy.bet} chips and raise. How much more over {self.enemy.bet} will you raise? "))
            while self.bet <= 0:
                self.bet = int(input(f'You must raise by a positive number. '))
            while self.bet > (self.bank + self.enemy.bet):
                self.bet = int(input(f'After calling {self.enemy.bet}, you would only have {self.bank - self.enemy.bet} chips left to raise! '))
            while self.bet > self.enemy.bank:
                self.bet = int(input(f"You cannot raise more than your opponent's {self.enemy.bank} remaining chips! "))
            self.bank -= (self.enemy.bet + self.bet)
            pot += (self.enemy.bet + self.bet)
            self.enemy.bet = 0
            self.enemy.call_bet()

    def check_bet(self):
        global pot
        self.examine_board()
        if stage == 1 and blind > 0: print(f'{self.enemy.name} has called the blind of {blind} chips. {self.name} to play.')
        else: print(f'{self.enemy.name} has checked. {self.name} to play.')
        choice = str.lower(input(f"{self.name}, would you like to PEEK at your cards, CHECK or BET?")[0])
        while choice != 'p' and choice != 'c' and choice != 'b':
            choice = str.lower(input("Unrecognized command. Would you like to PEEK at your cards, CHECK or BET?")[0])
        if choice == 'p':
            self.peek_cards()
            self.check_bet()
        if choice == 'c':
            self.next_to_play = False
            self.enemy.next_to_play = True
            dealer()
        if choice == 'b':
            self.bet = int(input('How much would you like to bet? '))
            while self.bet <= 0:
                self.bet = int(input('You must bet a positive number of chips. '))
            while self.bet > self.bank:
                self.bet = int(input(f'You only have {self.bank} chips! '))
            while self.bet > self.enemy.bank:
                self.bet = int(input(f"You cannot bet more than your opponent's {self.enemy.bank} remaining chips!"))
            self.bank -= self.bet
            pot += self.bet
            self.enemy.call_bet()

    def call_bet(self):
        global pot
        self.examine_board()
        if self.enemy.bet == self.bank and self.enemy.bank == 0:
            print(f'{self.name}, your opponent {self.enemy.name} has gone ALL-IN with {self.enemy.bet} chips, pushing you ALL-IN!')
            self.enemy.all_in = True
        elif self.enemy.bet == self.bank:
            print(f'{self.name}, your opponent {self.enemy.name} has pushed you ALL-IN with {self.enemy.bet} chips!')
            self.enemy.all_in = True
        elif self.enemy.bank == 0:
            print(f'{self.name}, your opponent {self.enemy.name} has gone ALL-IN with {self.enemy.bet} chips!')
        if self.enemy.all_in:
            choice = str.lower(input(f"{self.name}, would you like to PEEK at your cards, CALL or FOLD?")[0])
            while choice != 'p' and choice != 'c' and choice != 'f':
                choice = str.lower(
                    input("Unrecognized command. Would you like to PEEK at your cards, CALL, RAISE or FOLD?")[0])
            if choice == 'p':
                self.peek_cards()
                self.call_bet()
            if choice == 'f':
                print(f'{self.name} has folded!')
                self.enemy.award_fold()
            if choice == 'c':
                self.bank -= self.enemy.bet
                pot += self.enemy.bet
                self.enemy.bet = 0
                self.next_to_play = False
                self.enemy.next_to_play = True
                dealer()




        else: print(f'{self.name}, your opponent {self.enemy.name} has bet {self.enemy.bet} chips.')
        choice = str.lower(input(f"{self.name}, would you like to PEEK at your cards, CALL, RAISE or FOLD?")[0])
        while choice != 'p' and choice != 'c' and choice != 'r' and choice != 'f':
            choice = str.lower(input("Unrecognized command. Would you like to PEEK at your cards, CALL, RAISE or FOLD?")[0])
        if choice == 'p':
            self.peek_cards()
            self.call_bet()
        if choice == 'f':
            print(f'{self.name} has folded!')
            self.enemy.award_fold()
        if choice == 'c':
            self.bank -= self.enemy.bet
            pot += self.enemy.bet
            self.enemy.bet = 0
            self.next_to_play = False
            self.enemy.next_to_play = True
            dealer()
        if choice == 'r':
            self.bet = int(input(f"You will see your opponent's bet of {self.enemy.bet} chips and raise them. How much more over {self.enemy.bet} will you raise? "))
            while self.bet <= 0:
                self.bet = int(input(f'You must raise by a positive number. '))
            while self.bet > (self.bank + self.enemy.bet):
                self.bet = int(input(f'After calling {self.enemy.bet}, you would only have {self.bank - self.enemy.bet} chips left to raise! '))
            while self.bet > self.enemy.bank:
                self.bet = int(input(f"You cannot raise more than your opponent's {self.enemy.bank} remaining chips! "))
            self.bank -= (self.enemy.bet + self.bet)
            pot += (self.enemy.bet + self.bet)
            self.enemy.bet = 0
            self.enemy.call_bet()


    def award_fold(self):
        self.bank += pot
        print(f"Awarding the pot of {pot} chips to {self.name}")
        reset = str.lower(input("Press R to reset game configurations. Else, press ENTER to play the next hand."))
        if reset == 'r': main()
        else: next_hand()

# Initializing cards in class Card and creating the deck
if True:
    c2h = Card(name=f'{Fore.RED}🂲2♥{Style.RESET_ALL}', rank=2, suit='heart')
    c3h = Card(name=f'{Fore.RED}🂳3♥{Style.RESET_ALL}', rank=3, suit='heart')
    c4h = Card(name=f'{Fore.RED}🂴4♥{Style.RESET_ALL}', rank=4, suit='heart')
    c5h = Card(name=f'{Fore.RED}🂵5♥{Style.RESET_ALL}', rank=5, suit='heart')
    c6h = Card(name=f'{Fore.RED}🂶6♥{Style.RESET_ALL}', rank=6, suit='heart')
    c7h = Card(name=f'{Fore.RED}🂷7♥{Style.RESET_ALL}', rank=7, suit='heart')
    c8h = Card(name=f'{Fore.RED}🂸8♥{Style.RESET_ALL}', rank=8, suit='heart')
    c9h = Card(name=f'{Fore.RED}🂹9♥{Style.RESET_ALL}', rank=9, suit='heart')
    c10h = Card(name=f'{Fore.RED}🂺10♥{Style.RESET_ALL}', rank=10, suit='heart')
    cJh = Card(name=f'{Fore.RED}🂻J♥{Style.RESET_ALL}', rank=11, suit='heart')
    cQh = Card(name=f'{Fore.RED}🂽Q♥{Style.RESET_ALL}', rank=12, suit='heart')
    cKh = Card(name=f'{Fore.RED}🂾K♥{Style.RESET_ALL}', rank=13, suit='heart')
    cAh = Card(name=f'{Fore.RED}🂱A♥{Style.RESET_ALL}', rank=14, suit='heart')

    c2d = Card(name=f'{Fore.YELLOW}🃂2♦{Style.RESET_ALL}', rank=2, suit='diamond')
    c3d = Card(name=f'{Fore.YELLOW}🃃3♦{Style.RESET_ALL}', rank=3, suit='diamond')
    c4d = Card(name=f'{Fore.YELLOW}🃄4♦{Style.RESET_ALL}', rank=4, suit='diamond')
    c5d = Card(name=f'{Fore.YELLOW}🃅5♦{Style.RESET_ALL}', rank=5, suit='diamond')
    c6d = Card(name=f'{Fore.YELLOW}🃆6♦{Style.RESET_ALL}', rank=6, suit='diamond')
    c7d = Card(name=f'{Fore.YELLOW}🃇7♦{Style.RESET_ALL}', rank=7, suit='diamond')
    c8d = Card(name=f'{Fore.YELLOW}🃈8♦{Style.RESET_ALL}', rank=8, suit='diamond')
    c9d = Card(name=f'{Fore.YELLOW}🃉9♦{Style.RESET_ALL}', rank=9, suit='diamond')
    c10d = Card(name=f'{Fore.YELLOW}🃊10♦{Style.RESET_ALL}', rank=10, suit='diamond')
    cJd = Card(name=f'{Fore.YELLOW}🃋J♦{Style.RESET_ALL}', rank=11, suit='diamond')
    cQd = Card(name=f'{Fore.YELLOW}🃍Q♦{Style.RESET_ALL}', rank=12, suit='diamond')
    cKd = Card(name=f'{Fore.YELLOW}🃎K♦{Style.RESET_ALL}', rank=13, suit='diamond')
    cAd = Card(name=f'{Fore.YELLOW}🃁A♦{Style.RESET_ALL}', rank=14, suit='diamond')

    c2c = Card(name=f'{Fore.GREEN}🃒2♣{Style.RESET_ALL}', rank=2, suit='club')
    c3c = Card(name=f'{Fore.GREEN}🃓3♣{Style.RESET_ALL}', rank=3, suit='club')
    c4c = Card(name=f'{Fore.GREEN}🃔4♣{Style.RESET_ALL}', rank=4, suit='club')
    c5c = Card(name=f'{Fore.GREEN}🃕5♣{Style.RESET_ALL}', rank=5, suit='club')
    c6c = Card(name=f'{Fore.GREEN}🃖6♣{Style.RESET_ALL}', rank=6, suit='club')
    c7c = Card(name=f'{Fore.GREEN}🃗7♣{Style.RESET_ALL}', rank=7, suit='club')
    c8c = Card(name=f'{Fore.GREEN}🃘8♣{Style.RESET_ALL}', rank=8, suit='club')
    c9c = Card(name=f'{Fore.GREEN}🃙9♣{Style.RESET_ALL}', rank=9, suit='club')
    c10c = Card(name=f'{Fore.GREEN}🃚10♣{Style.RESET_ALL}', rank=10, suit='club')
    cJc = Card(name=f'{Fore.GREEN}🃛J♣{Style.RESET_ALL}', rank=11, suit='club')
    cQc = Card(name=f'{Fore.GREEN}🃝Q♣{Style.RESET_ALL}', rank=12, suit='club')
    cKc = Card(name=f'{Fore.GREEN}🃞K♣{Style.RESET_ALL}', rank=13, suit='club')
    cAc = Card(name=f'{Fore.GREEN}🃑A♣{Style.RESET_ALL}', rank=14, suit='club')

    c2s = Card(name=f'{Fore.BLUE}🂢2♤{Style.RESET_ALL}', rank=2, suit='spade')
    c3s = Card(name=f'{Fore.BLUE}🂣3♤{Style.RESET_ALL}', rank=3, suit='spade')
    c4s = Card(name=f'{Fore.BLUE}🂤4♤{Style.RESET_ALL}', rank=4, suit='spade')
    c5s = Card(name=f'{Fore.BLUE}🂥5♤{Style.RESET_ALL}', rank=5, suit='spade')
    c6s = Card(name=f'{Fore.BLUE}🂦6♤{Style.RESET_ALL}', rank=6, suit='spade')
    c7s = Card(name=f'{Fore.BLUE}🂧7♤{Style.RESET_ALL}', rank=7, suit='spade')
    c8s = Card(name=f'{Fore.BLUE}🂨8♤{Style.RESET_ALL}', rank=8, suit='spade')
    c9s = Card(name=f'{Fore.BLUE}🂩9♤{Style.RESET_ALL}', rank=9, suit='spade')
    c10s = Card(name=f'{Fore.BLUE}🂪10♤{Style.RESET_ALL}', rank=10, suit='spade')
    cJs = Card(name=f'{Fore.BLUE}🂫J♤{Style.RESET_ALL}', rank=11, suit='spade')
    cQs = Card(name=f'{Fore.BLUE}🂭Q♤{Style.RESET_ALL}', rank=12, suit='spade')
    cKs = Card(name=f'{Fore.BLUE}🂮K♤{Style.RESET_ALL}', rank=13, suit='spade')
    cAs = Card(name=f'{Fore.BLUE}🂡A♤{Style.RESET_ALL}', rank=14, suit='spade')


# Initializing player classes ----- Placeholders given
p1 = Player(name='', bank=1, enemy='')
p2 = Player(name='', bank=1, enemy='')
p1.enemy = p2; p2.enemy = p1

# Introduction
#######################################################################################################################
print()
print("This game simulates Heads-Up Texas Hold'em Poker. It requires two players. \nTo keep hands secret, please look away during opponent's turn.")
print('When numbers are requested, entering anything but numbers will break the game.')
print()
print("PEEK, BET, CHECK, CALL, RAISE, and FOLD can all be entered by typing a single \nletter, 'p' 'b', 'c', 'c', 'r', and 'f' respectively.")
print()
print("Recommended console font size is 30 pt with the terminal fully expanded.")
print()
print("If the program seems to have stopped when pressing ENTER to see cards, \n"
      "try BACKSPACE and then ENTER again. Pressing ENTER twice WILL crash the game!")
print()
debug = str.lower(input("Press ENTER to begin."))

#######################################################################################################################

# Predefining vars
stage, pot = 0,0
deck, community = [],[]
blind, ante = 0,0
p1.next_to_play = True

def main():
    global deck, blind, ante
    deck = [c2h, c3h, c4h, c5h, c6h, c7h, c8h, c9h, c10h, cJh, cQh, cKh, cAh,
            c2d, c3d, c4d, c5d, c6d, c7d, c8d, c9d, c10d, cJd, cQd, cKd, cAd,
            c2c, c3c, c4c, c5c, c6c, c7c, c8c, c9c, c10c, cJc, cQc, cKc, cAc,
            c2s, c3s, c4s, c5s, c6s, c7s, c8s, c9s, c10s, cJs, cQs, cKs, cAs]

    p1.name = input("Player one, input name: ")
    p1.name = f'{Fore.CYAN}{p1.name}{Style.RESET_ALL}'
    p2.name = input("Player two, input name: ")
    p2.name = f'{Fore.MAGENTA}{p2.name}{Style.RESET_ALL}'
    start_chips = int(input("How many chips to start? "))
    p1.bank = start_chips
    p2.bank = start_chips
    ante = int(input("Ante size? "))
    while ante >= start_chips:
        ante = int(input(f"Ante must be less than {start_chips}. Ante size? "))
    blind = int(input("Blind size? "))
    while blind >= (start_chips - ante):
        blind = int(input(f"Blind must be less than {start_chips - ante}. Blind size? "))

    # Set all starting vars in need of values
    # Set up antes and blind configs

    next_hand()

def next_hand():
    global stage, pot, deck, community, failure
    stage,pot = 0,0
    p1.hand, p2.hand, community = [],[],[]
    p1.wins, p2.wins = False, False
    failure = False
    p1.all_in, p2.all_in = False, False


    deck = [c2h, c3h, c4h, c5h, c6h, c7h, c8h, c9h, c10h, cJh, cQh, cKh, cAh,
            c2d, c3d, c4d, c5d, c6d, c7d, c8d, c9d, c10d, cJd, cQd, cKd, cAd,
            c2c, c3c, c4c, c5c, c6c, c7c, c8c, c9c, c10c, cJc, cQc, cKc, cAc,
            c2s, c3s, c4s, c5s, c6s, c7s, c8s, c9s, c10s, cJs, cQs, cKs, cAs]
    # Resets for next hand - removing cards from player and community, rebuilding the deck, resetting stage
    # KEEPS chip counts

    if p1.start_round: p1.start_round = False
    else: p1.start_round = True

    dealer()

def dealer():
    global stage
    p1.bet, p2.bet, = 0,0
    stage += 1

    if p1.bank == 0 or p2.bank == 0: # Skips to showdown if a player's bank is 0
        showdown()
    if stage == 1:              # Goes to correct stage
        preflop()
    elif stage == 2:
        flop()
    elif stage == 3 or stage == 4:
        turn_river()
    elif stage == 5:
        showdown()

def preflop():
    global pot

    x = (random.choice(deck))   # Gets p1 and p2 cards
    deck.remove(x)
    y = (random.choice(deck))
    deck.remove(y)
    p1.get_cards(x,y)
    x = (random.choice(deck))
    deck.remove(x)
    y = (random.choice(deck))
    deck.remove(y)
    p2.get_cards(x,y)

    p1.bank -= ante             # Pays the ante, if any
    p2.bank -= ante
    pot += (ante * 2)

    if p1.start_round:          # Pays the blind, if any
        p2.bank -= blind
    else:
        p1.bank -= blind
    pot += blind

    if blind == 0:              # Starts the start_round player if no blind
        if p1.start_round: p1.start()
        else: p2.start()
    if blind > 0:               # Starts the start_round player if blind
        if p1.start_round: p1.start_blind()
        else: p2.start_blind()

def flop():
    x = (random.choice(deck))   # Gets first three community cards
    deck.remove(x)
    y = (random.choice(deck))
    deck.remove(y)
    z = (random.choice(deck))
    deck.remove(z)
    community.append(x)
    community.append(y)
    community.append(z)
    if p1.next_to_play: p1.start()  # Starts the next_to_play player
    else: p2.start()

def turn_river():
    x = (random.choice(deck))   # Gets the fourth community card
    deck.remove(x)
    y = (random.choice(deck))
    deck.remove(y)
    community.append(x)
    community.append(y)
    if p1.next_to_play: p1.start()  # Starts the next_to_play player
    else: p2.start()

def showdown():
    if len(community) == 0:     # Drawing out remaining cards in case of an ALL-IN
        x = random.choice(deck)
        deck.remove(x)
        community.append(x)
        x = random.choice(deck)
        deck.remove(x)
        community.append(x)
        x = random.choice(deck)
        deck.remove(x)
        community.append(x)
    if len(community) == 3:
        x = random.choice(deck)
        deck.remove(x)
        community.append(x)
    if len(community) == 4:
        x = random.choice(deck)
        deck.remove(x)
        community.append(x)

    for n in range(100):
        print()
    print("****************************************** SHOWDOWN! ******************************************")
    print()
    print(f'Community: {community[0].name}, {community[1].name}, {community[2].name}, {community[3].name}, {community[4].name}')
    print(f"{p1.name}'s hand: {p1.hand[0].name}, {p1.hand[1].name}.")
    print(f"{p2.name}'s hand: {p2.hand[0].name}, {p2.hand[1].name}.")
    print()
    input("Press ENTER to see who wins!")
    print()
    resolve()

def resolve():
    p1.hand = p1.hand + community  # Adding community cards to player's hands for resolve()
    p2.hand = p2.hand + community

    def strflshcheck():
        p1_flush_ranks = set()
        p1_made_flush = 0
        p1_hearts, p1_diamonds, p1_clubs, p1_spades = 0, 0, 0, 0
        for a in p1.hand:
            if a.suit == 'heart': p1_hearts += 1
            if a.suit == 'diamond': p1_diamonds += 1
            if a.suit == 'club': p1_clubs += 1
            if a.suit == 'spade': p1_spades += 1
        if p1_hearts >= 5:
            p1_made_flush = 1
            for a in p1.hand:
                if a.suit == 'heart':
                    p1_flush_ranks.add(a.rank)
        if p1_diamonds >= 5:
            p1_made_flush = 1
            for a in p1.hand:
                if a.suit == 'diamond':
                    p1_flush_ranks.add(a.rank)
        if p1_clubs >= 5:
            p1_made_flush = 1
            for a in p1.hand:
                if a.suit == 'club':
                    p1_flush_ranks.add(a.rank)
        if p1_spades >= 5:
            p1_made_flush = 1
            for a in p1.hand:
                if a.suit == 'spade':
                    p1_flush_ranks.add(a.rank)


        p1_top_straight_flush = 0
        if p1_made_flush == 1:
            if {10, 11, 12, 13, 14}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 14
            elif {9, 10, 11, 12, 13}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 13
            elif {8, 9, 10, 11, 12}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 12
            elif {7, 8, 9, 10, 11}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 11
            elif {6, 7, 8, 9, 10}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 10
            elif {5, 6, 7, 8, 9}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 9
            elif {4, 5, 6, 7, 8}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 8
            elif {3, 4, 5, 6, 7}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 7
            elif {2, 3, 4, 5, 6}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 6
            elif {14, 2, 3, 4, 5}.issubset(p1_flush_ranks):
                p1_top_straight_flush = 5

        p2_flush_ranks = set()
        p2_made_flush = 0
        p2_hearts, p2_diamonds, p2_clubs, p2_spades = 0, 0, 0, 0
        for a in p2.hand:
            if a.suit == 'heart': p2_hearts += 1
            if a.suit == 'diamond': p2_diamonds += 1
            if a.suit == 'club': p2_clubs += 1
            if a.suit == 'spade': p2_spades += 1
        if p2_hearts >= 5:
            p2_made_flush = 1
            for a in p2.hand:
                if a.suit == 'heart':
                    p2_flush_ranks.add(a.rank)
        if p2_diamonds >= 5:
            p2_made_flush = 1
            for a in p2.hand:
                if a.suit == 'diamond':
                    p2_flush_ranks.add(a.rank)
        if p2_clubs >= 5:
            p2_made_flush = 1
            for a in p2.hand:
                if a.suit == 'club':
                    p2_flush_ranks.add(a.rank)
        if p2_spades >= 5:
            p2_made_flush = 1
            for a in p2.hand:
                if a.suit == 'spade':
                    p2_flush_ranks.add(a.rank)

        p2_top_straight_flush = 0
        if p2_made_flush == 1:
            if {10, 11, 12, 13, 14}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 14
            elif {9, 10, 11, 12, 13}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 13
            elif {8, 9, 10, 11, 12}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 12
            elif {7, 8, 9, 10, 11}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 11
            elif {6, 7, 8, 9, 10}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 10
            elif {5, 6, 7, 8, 9}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 9
            elif {4, 5, 6, 7, 8}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 8
            elif {3, 4, 5, 6, 7}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 7
            elif {2, 3, 4, 5, 6}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 6
            elif {14, 2, 3, 4, 5}.issubset(p2_flush_ranks):
                p2_top_straight_flush = 5

        if p1_top_straight_flush == 0 and p2_top_straight_flush == 0:
            quadcheck()
        elif p1_top_straight_flush > p2_top_straight_flush:
            print(f'{p1.name} wins with a straight flush! Wow!')
            p1.wins = True
        elif p2_top_straight_flush > p1_top_straight_flush:
            print(f'{p2.name} wins with a straight flush! Wow!')
            p2.wins = True
        else:
            print(f"Unbelievable! Both players tie with the same straight flush!")
            p1.wins = False; p2.wins = False

    def quadcheck():
        p1_quad_rank = 0
        for a in p1.hand:
            for b in p1.hand:
                for c in p1.hand:
                    for d in p1.hand:
                        if (a.name != b.name and a.name != c.name and a.name != d.name and
                                b.name != c.name and b.name != d.name and c.name != d.name):
                            if a.rank == b.rank and b.rank == c.rank and c.rank == d.rank:
                                if p1_quad_rank < a.rank: p1_quad_rank = a.rank

        p2_quad_rank = 0
        for a in p2.hand:
            for b in p2.hand:
                for c in p2.hand:
                    for d in p1.hand:
                        if (a.name != b.name and a.name != c.name and a.name != d.name and
                                b.name != c.name and b.name != d.name and c.name != d.name):
                            if a.rank == b.rank and b.rank == c.rank and c.rank == d.rank:
                                if p2_quad_rank < a.rank: p2_quad_rank = a.rank

        if p1_quad_rank == 0 and p2_quad_rank == 0: fullcheck()
        elif p1_quad_rank > p2_quad_rank:
            print(f'{p1.name} wins with four-of-a-kind!')
            p1.wins = True
        elif p2_quad_rank > p1_quad_rank:
            print(f'{p2.name} wins with four-of-a-kind!')
            p2.wins = True
        
        elif p1_quad_rank == p2_quad_rank:
            p1_kicker = 0
            for a in p1.hand:
                if a.rank != p1_quad_rank:
                    if p1_kicker < a.rank: p1_kicker = a.rank
            p2_kicker = 0
            for a in p2.hand:
                if a.rank != p2_quad_rank:
                    if p2_kicker < a.rank: p2_kicker = a.rank
            if p1_kicker > p2_kicker: 
                print(f'{p1.name} wins with a four-of-a-kind and higher kicker!')
                p1.wins = True
            elif p2_kicker > p1_kicker:
                print(f'{p2.name} wins with a four-of-a-kind and higher kicker!')
                p2.wins = True
            else:
                print(f"Wow! Both players tie with the same four-of-a-kind and kicker!")
                p1.wins = False; p2.wins = False

    def fullcheck():
        p1_trip_rank = 0
        for a in p1.hand:
            for b in p1.hand:
                for c in p1.hand:
                    if a.name != b.name and a.name != c.name and b.name != c.name:
                        if a.rank == b.rank and b.rank == c.rank:
                            if p1_trip_rank < a.rank: p1_trip_rank = a.rank
        p1_pair_rank = 0
        if p1_trip_rank > 0:
            for a in p1.hand:
                for b in p1.hand:
                    if a.rank != p1_trip_rank:
                        if a.name != b.name and a.rank == b.rank:
                            if p1_pair_rank < a.rank: p1_pair_rank = a.rank

        p2_trip_rank = 0
        for a in p2.hand:
            for b in p2.hand:
                for c in p2.hand:
                    if a.name != b.name and a.name != c.name and b.name != c.name:
                        if a.rank == b.rank and b.rank == c.rank:
                            if p2_trip_rank < a.rank: p2_trip_rank = a.rank
        p2_pair_rank = 0
        if p2_trip_rank > 0:
            for a in p2.hand:
                for b in p2.hand:
                    if a.rank != p2_trip_rank:
                        if a.name != b.name and a.rank == b.rank:
                            if p2_pair_rank < a.rank: p2_pair_rank = a.rank

        if (p1_trip_rank == 0 or p1_pair_rank == 0) and (p2_trip_rank == 0 or p2_pair_rank == 0): flushcheck()
        elif p1_trip_rank > p2_trip_rank and p1_pair_rank > 0:
            print(f'{p1.name} wins with a full house!')
            p1.wins = True
        elif p2_trip_rank > p1_trip_rank and p2_pair_rank > 0:
            print(f'{p2.name} wins with a full house!')
            p2.wins = True
        elif p1_trip_rank == p2_trip_rank and p2_pair_rank == 0:
            print(f'{p1.name} wins with a full house!')
            p1.wins = True
        elif p2_trip_rank == p1_trip_rank and p1_pair_rank == 0:
            print(f'{p2.name} wins with a full house!')
            p2.wins = True
        elif p1_trip_rank == p2_trip_rank and p1_pair_rank > 0 and p2_pair_rank > 0:
            if p1_pair_rank > p2_pair_rank:
                print(f'{p1.name} wins with a full house!')
                p1.wins = True
            elif p2_pair_rank > p1_pair_rank:
                print(f'{p2.name} wins with a full house!')
                p2.wins = True
            else:
                print(f"Wow! Both players tie with the same full house!")
                p1.wins = False; p2.wins = False

    def flushcheck():
        p1_flush_ranks = []
        p1_hearts, p1_diamonds, p1_clubs, p1_spades = 0, 0, 0, 0
        for a in p1.hand:
            if a.suit == 'heart': p1_hearts += 1
            if a.suit == 'diamond': p1_diamonds += 1
            if a.suit == 'club': p1_clubs += 1
            if a.suit == 'spade': p1_spades += 1
        if p1_hearts >= 5:
            for a in p1.hand:
                if a.suit == 'heart':
                    p1_flush_ranks.append(a.rank)
        if p1_diamonds >= 5:
            for a in p1.hand:
                if a.suit == 'diamond':
                    p1_flush_ranks.append(a.rank)
        if p1_clubs >= 5:
            for a in p1.hand:
                if a.suit == 'club':
                    p1_flush_ranks.append(a.rank)
        if p1_spades >= 5:
            for a in p1.hand:
                if a.suit == 'spade':
                    p1_flush_ranks.append(a.rank)
        p1_flush_ranks.sort()

        p2_hearts, p2_diamonds, p2_clubs, p2_spades = 0, 0, 0, 0
        p2_flush_ranks = []
        for a in p2.hand:
            if a.suit == 'heart': p2_hearts += 1
            if a.suit == 'diamond': p2_diamonds += 1
            if a.suit == 'club': p2_clubs += 1
            if a.suit == 'spade': p2_spades += 1
        if p2_hearts >= 5:
            for a in p2.hand:
                if a.suit == 'heart':
                    p2_flush_ranks.append(a.rank)
        if p2_diamonds >= 5:
            for a in p2.hand:
                if a.suit == 'diamond':
                    p2_flush_ranks.append(a.rank)
        if p2_clubs >= 5:
            for a in p2.hand:
                if a.suit == 'club':
                    p2_flush_ranks.append(a.rank)
        if p2_spades >= 5:
            for a in p2.hand:
                if a.suit == 'spade':
                    p2_flush_ranks.append(a.rank)
        p2_flush_ranks.sort()

        if len(p1_flush_ranks) > 0 and len(p2_flush_ranks) > 0:
            if p1_flush_ranks[-1] > p2_flush_ranks[-1]:
                print(f'{p1.name} wins with the higher flush!')
                p1.wins = True
            elif p2_flush_ranks[-1] > p1_flush_ranks[-1]:
                print(f'{p2.name} wins with the higher flush!')
                p2.wins = True
            elif p1_flush_ranks[-2] > p2_flush_ranks[-2]:
                print(f'{p1.name} wins with the higher flush!')
                p1.wins = True
            elif p2_flush_ranks[-2] > p1_flush_ranks[-2]:
                print(f'{p2.name} wins with the higher flush!')
                p2.wins = True
            elif p1_flush_ranks[-3] > p2_flush_ranks[-3]:
                print(f'{p1.name} wins with the higher flush!')
                p1.wins = True
            elif p2_flush_ranks[-3] > p1_flush_ranks[-3]:
                print(f'{p2.name} wins with the higher flush!')
                p2.wins = True
            elif p1_flush_ranks[-4] > p2_flush_ranks[-4]:
                print(f'{p1.name} wins with the higher flush!')
                p1.wins = True
            elif p2_flush_ranks[-4] > p1_flush_ranks[-4]:
                print(f'{p2.name} wins with the higher flush!')
                p2.wins = True
            elif p1_flush_ranks[-5] > p2_flush_ranks[-5]:
                print(f'{p1.name} wins with the higher flush!')
                p1.wins = True
            elif p2_flush_ranks[-5] > p1_flush_ranks[-5]:
                print(f'{p2.name} wins with the higher flush!')
                p2.wins = True
            else:
                print(f'Wow! Both players tie with the same flush!')
                p1.wins = False; p2.wins = False
        elif len(p1_flush_ranks) > 0:
            print(f'{p1.name} wins with a flush!')
            p1.wins = True
        elif len(p2_flush_ranks) > 0:
            print(f'{p2.name} wins with a flush!')
            p2.wins = True
        else:
            straightcheck()

    def straightcheck():
        p1_ranks = set()
        for a in p1.hand:
            p1_ranks.add(a.rank)
        p1_top_straight = 0
        if {10, 11, 12, 13, 14}.issubset(p1_ranks):
            p1_top_straight = 14
        elif {9, 10, 11, 12, 13}.issubset(p1_ranks):
            p1_top_straight = 13
        elif {8, 9, 10, 11, 12}.issubset(p1_ranks):
            p1_top_straight = 12
        elif {7, 8, 9, 10, 11}.issubset(p1_ranks):
            p1_top_straight = 11
        elif {6, 7, 8, 9, 10}.issubset(p1_ranks):
            p1_top_straight = 10
        elif {5, 6, 7, 8, 9}.issubset(p1_ranks):
            p1_top_straight = 9
        elif {4, 5, 6, 7, 8}.issubset(p1_ranks):
            p1_top_straight = 8
        elif {3, 4, 5, 6, 7}.issubset(p1_ranks):
            p1_top_straight = 7
        elif {2, 3, 4, 5, 6}.issubset(p1_ranks):
            p1_top_straight = 6
        elif {14, 2, 3, 4, 5}.issubset(p1_ranks):
            p1_top_straight = 5

        p2_ranks = set()
        for a in p2.hand:
            p2_ranks.add(a.rank)
        p2_top_straight = 0
        if {10, 11, 12, 13, 14}.issubset(p2_ranks):
            p2_top_straight = 14
        elif {9, 10, 11, 12, 13}.issubset(p2_ranks):
            p2_top_straight = 13
        elif {8, 9, 10, 11, 12}.issubset(p2_ranks):
            p2_top_straight = 12
        elif {7, 8, 9, 10, 11}.issubset(p2_ranks):
            p2_top_straight = 11
        elif {6, 7, 8, 9, 10}.issubset(p2_ranks):
            p2_top_straight = 10
        elif {5, 6, 7, 8, 9}.issubset(p2_ranks):
            p2_top_straight = 9
        elif {4, 5, 6, 7, 8}.issubset(p2_ranks):
            p2_top_straight = 8
        elif {3, 4, 5, 6, 7}.issubset(p2_ranks):
            p2_top_straight = 7
        elif {2, 3, 4, 5, 6}.issubset(p2_ranks):
            p2_top_straight = 6
        elif {14, 2, 3, 4, 5}.issubset(p2_ranks):
            p2_top_straight = 5

        if p1_top_straight == 0 and p2_top_straight == 0:
            tripcheck()
        elif p1_top_straight > p2_top_straight:
            print(f'{p1.name} wins with a straight!')
            p1.wins = True
        elif p2_top_straight > p1_top_straight:
            print(f'{p2.name} wins with a straight!')
            p2.wins = True
        else:
            print('Wow! Both players tie with the same straight!')
            p1.wins = False; p2.wins = False

    def tripcheck():
        p1_trip_rank = 0
        for a in p1.hand:
            for b in p1.hand:
                for c in p1.hand:
                    if a.name != b.name and a.name != c.name and b.name != c.name:
                        if a.rank == b.rank and b.rank == c.rank:
                            if p1_trip_rank < a.rank: p1_trip_rank = a.rank

        p2_trip_rank = 0
        for a in p2.hand:
            for b in p2.hand:
                for c in p2.hand:
                    if a.name != b.name and a.name != c.name and b.name != c.name:
                        if a.rank == b.rank and b.rank == c.rank:
                            if p2_trip_rank < a.rank: p2_trip_rank = a.rank

        if p1_trip_rank == 0 and p2_trip_rank == 0:
            twopaircheck()
        elif p1_trip_rank > p2_trip_rank:
            print(f'{p1.name} wins with three-of-a-kind!')
            p1.wins = True
        elif p2_trip_rank > p1_trip_rank:
            print(f'{p2.name} wins with three-of-a-kind!')
            p2.wins = True
        elif p1_trip_rank == p2_trip_rank:
            p1_kicker_1, p1_kicker_2 = 0,0
            for a in p1.hand:
                if a.rank != p1_trip_rank:
                    if p1_kicker_1 < a.rank: p1_kicker_1 = a.rank
            for a in p1.hand:
                if a.rank != p1_trip_rank and a.rank != p1_kicker_1:
                    if p1_kicker_2 < a.rank: p1_kicker_2 = a.rank
            p2_kicker_1, p2_kicker_2 = 0,0
            for a in p2.hand:
                if a.rank != p2_trip_rank:
                    if p2_kicker_1 < a.rank: p2_kicker_1 = a.rank
            for a in p2.hand:
                if a.rank != p2_trip_rank and a.rank != p2_kicker_1:
                    if p2_kicker_2 < a.rank: p2_kicker_2 = a.rank
            if p1_kicker_1 > p2_kicker_1: 
                print(f'{p1.name} wins with a three-of-a-kind and higher kicker!')
                p1.wins = True
            elif p2_kicker_1 > p1_kicker_1:
                print(f'{p2.name} wins with a three-of-a-kind and higher kicker!')
                p2.wins = True
            elif p1_kicker_2 > p2_kicker_2:
                print(f'{p1.name} wins with a three-of-a-kind and higher kicker!')
                p1.wins = True
            elif p2_kicker_2 > p1_kicker_2:
                print(f'{p2.name} wins with a three-of-a-kind and higher kicker!')
                p2.wins = True
            else: 
                print(f"Wow! Both players tie with the same three-of-a-kind and kickers!")
                p1.wins = False; p2.wins = False  

    def twopaircheck():
        p1_hipair_rank = 0
        for a in p1.hand:
            for b in p1.hand:
                if a.name != b.name:
                    if a.rank == b.rank:
                        if p1_hipair_rank < a.rank: p1_hipair_rank = a.rank
        p1_lopair_rank = 0
        for a in p1.hand:
            for b in p1.hand:
                if a.name != b.name and a.rank == b.rank:
                    if a.rank != p1_hipair_rank:
                        if p1_lopair_rank < a.rank: p1_lopair_rank = a.rank

        p2_hipair_rank = 0
        for a in p2.hand:
            for b in p2.hand:
                if a.name != b.name:
                    if a.rank == b.rank:
                        if p2_hipair_rank < a.rank: p2_hipair_rank = a.rank
        p2_lopair_rank = 0
        for a in p2.hand:
            for b in p2.hand:
                if a.name != b.name and a.rank == b.rank:
                    if a.rank != p2_hipair_rank:
                        if p2_lopair_rank < a.rank: p2_lopair_rank = a.rank

        if p1_hipair_rank > 0 and p1_lopair_rank > 0 and p2_hipair_rank > 0 and p2_lopair_rank > 0:
            if p1_hipair_rank > p2_hipair_rank:
                print(f'{p1.name} wins with the higher two-pair!')
                p1.wins = True
            elif p2_hipair_rank > p1_hipair_rank:
                print(f'{p2.name} wins with the higher two-pair!')
                p2.wins = True
            elif p1_lopair_rank > p2_lopair_rank:
                print(f'{p1.name} wins with the higher two-pair!')
                p1.wins = True
            elif p2_lopair_rank > p1_lopair_rank:
                print(f'{p2.name} wins with the higher two-pair!')
                p2.wins = True
            
            elif p1_hipair_rank == p2_hipair_rank and p1_lopair_rank == p2_lopair_rank:
                p1_kicker = 0
                for a in p1.hand:
                    if a.rank != p1_hipair_rank and a.rank != p1_lopair_rank:
                        if p1_kicker < a.rank: p1_kicker = a.rank
                p2_kicker = 0
                for a in p2.hand:
                    if a.rank != p2_hipair_rank and a.rank != p2_lopair_rank:
                        if p2_kicker < a.rank: p2_kicker = a.rank
                if p1_kicker > p2_kicker: 
                    print(f'{p1.name} wins with a two-pair and higher kicker!')
                    p1.wins = True
                elif p2_kicker > p1_kicker:
                    print(f'{p2.name} wins with a two-pair and higher kicker!')
                    p2.wins = True
                else:
                    print(f"Wow! Both players tie with the same two-pair and kicker!")
                    p1.wins = False; p2.wins = False
        
        elif p1_lopair_rank > p2_lopair_rank:
            print(f'{p1.name} wins with a two-pair!')
            p1.wins = True
        elif p2_lopair_rank > p1_lopair_rank:
            print(f'{p2.name} wins with a two-pair!')
            p2.wins = True
        else:
            paircheck()

    def paircheck():
        p1_pair_rank = 0
        for a in p1.hand:
            for b in p1.hand:
                if a.name != b.name:
                    if a.rank == b.rank:
                        if p1_pair_rank < a.rank: p1_pair_rank = a.rank

        p2_pair_rank = 0
        for a in p2.hand:
            for b in p2.hand:
                if a.name != b.name:
                    if a.rank == b.rank:
                        if p2_pair_rank < a.rank: p2_pair_rank = a.rank

        if p1_pair_rank > p2_pair_rank:
            print(f'{p1.name} wins with a pair!')
            p1.wins = True
        elif p2_pair_rank > p1_pair_rank:
            print(f'{p2.name} wins with a pair!')
            p2.wins = True
        
        elif p1_pair_rank == p2_pair_rank:
            p1_kicker_1, p1_kicker_2, p1_kicker_3 = 0,0,0
            for a in p1.hand:
                if a.rank != p1_pair_rank:
                    if p1_kicker_1 < a.rank: p1_kicker_1 = a.rank
            for a in p1.hand:
                if a.rank != p1_pair_rank and a.rank != p1_kicker_1:
                    if p1_kicker_2 < a.rank: p1_kicker_2 = a.rank
            for a in p1.hand:
                if a.rank != p1_pair_rank and a.rank != p1_kicker_1 and a.rank != p1_kicker_2:
                    if p1_kicker_3 < a.rank: p1_kicker_3 = a.rank
            p2_kicker_1, p2_kicker_2, p2_kicker_3 = 0,0,0
            for a in p2.hand:
                if a.rank != p2_pair_rank:
                    if p2_kicker_1 < a.rank: p2_kicker_1 = a.rank
            for a in p2.hand:
                if a.rank != p2_pair_rank and a.rank != p2_kicker_1:
                    if p2_kicker_2 < a.rank: p2_kicker_2 = a.rank
            for a in p2.hand:
                if a.rank != p2_pair_rank and a.rank != p2_kicker_1 and a.rank != p2_kicker_2:
                    if p2_kicker_3 < a.rank: p2_kicker_3 = a.rank
            if p1_kicker_1 > p2_kicker_1: 
                print(f'{p1.name} wins with a pair and higher kicker!')
                p1.wins = True
            elif p2_kicker_1 > p1_kicker_1:
                print(f'{p2.name} wins with a pair and higher kicker!')
                p2.wins = True
            elif p1_kicker_2 > p2_kicker_2:
                print(f'{p1.name} wins with a pair and higher kicker!')
                p1.wins = True
            elif p2_kicker_2 > p1_kicker_2:
                print(f'{p2.name} wins with a pair and higher kicker!')
                p2.wins = True
            elif p1_kicker_3 > p2_kicker_3:
                print(f'{p1.name} wins with a pair and higher kicker!')
                p1.wins = True
            elif p2_kicker_3 > p1_kicker_3:
                print(f'{p2.name} wins with a pair and higher kicker!')
                p2.wins = True
            else:
                print(f"Wow! Both players tie with the same pair and kickers!")
                p1.wins = False; p2.wins = False
        else:
            highcheck()

    def highcheck():
        global failure
        p1_1st, p1_2nd, p1_3rd, p1_4th, p1_5th = 0,0,0,0,0
        for a in p1.hand:
            if p1_1st < a.rank: p1_1st = a.rank
        for a in p1.hand:
            if p1_2nd < a.rank and a.rank != p1_1st: p1_2nd = a.rank
        for a in p1.hand:
            if p1_3rd < a.rank and a.rank != p1_1st and a.rank != p1_2nd: p1_3rd = a.rank
        for a in p1.hand:
            if p1_4th < a.rank and a.rank != p1_1st and a.rank != p1_2nd and a.rank != p1_3rd: p1_4th = a.rank
        for a in p1.hand:
            if p1_5th < a.rank and a.rank != p1_1st and a.rank != p1_2nd and a.rank != p1_3rd and a.rank != p1_4th: p1_5th = a.rank

        p2_1st, p2_2nd, p2_3rd, p2_4th, p2_5th = 0,0,0,0,0
        for a in p2.hand:
            if p2_1st < a.rank: p2_1st = a.rank
        for a in p2.hand:
            if p2_2nd < a.rank and a.rank != p2_1st: p2_2nd = a.rank
        for a in p2.hand:
            if p2_3rd < a.rank and a.rank != p2_1st and a.rank != p2_2nd: p2_3rd = a.rank
        for a in p2.hand:
            if p2_4th < a.rank and a.rank != p2_1st and a.rank != p2_2nd and a.rank != p2_3rd: p2_4th = a.rank
        for a in p2.hand:
            if p2_5th < a.rank and a.rank != p2_1st and a.rank != p2_2nd and a.rank != p2_3rd and a.rank != p2_4th: p2_5th = a.rank

        if p1_1st > p2_1st:
            print(f'{p1.name} wins with just a high card!')
            p1.wins = True
        elif p2_1st > p1_1st:
            print(f'{p2.name} wins with just a high card!')
            p2.wins = True
        elif p1_2nd > p2_2nd:
            print(f'{p1.name} wins with just a high card!')
            p1.wins = True
        elif p2_2nd > p1_2nd:
            print(f'{p2.name} wins with just a high card!')
            p2.wins = True
        elif p1_3rd > p2_3rd:
            print(f'{p1.name} wins with just a high card!')
            p1.wins = True
        elif p2_3rd > p1_3rd:
            print(f'{p2.name} wins with just a high card!')
            p2.wins = True
        elif p1_4th > p2_4th:
            print(f'{p1.name} wins with just a high card!')
            p1.wins = True
        elif p2_4th > p1_4th:
            print(f'{p2.name} wins with just a high card!')
            p2.wins = True
        elif p1_5th > p2_5th:
            print(f'{p1.name} wins with just a high card!')
            p1.wins = True
        elif p2_5th > p1_5th:
            print(f'{p2.name} wins with just a high card!')
            p2.wins = True
        else:
            print(f"What a disaster! You're both holding absolutely nothing and can't even beat the board!\n"
                  f"I ought to just keep the whole pot for such a miserable performance!")
            p1.wins = False
            p2.wins = False
            failure = True

    strflshcheck()

    if p1.wins: award(p1)
    elif p2.wins: award(p2)
    elif p1.wins == False and p2.wins == False:
        award(0)

def award(winner):
    if winner == p1 or winner == p2:
        print(f'{winner.name} takes the pot of {pot} chips.')
        winner.bank += pot
    elif winner != p1 and winner != p2 and failure == False:
        print(f"It's a split pot! Distributing {pot//2} chips between both players.")
        p1.bank += pot//2; p2.bank += pot//2
    else:
        print(f"In fact, I think I will!\n"
              f"The house is displeased. Pot of {pot} chips has been taken and distributed to the more fortunate.")
    if p1.bank == 0:
        input(f'{p1.name} has busted out! Press ENTER to reset the game.')
        main()
    if p2.bank == 0:
        input(f"{p2.name} has busted out! Press ENTER to reset the game.")
        main()
    replay = str.lower(input('Press R to reset game configurations. Else, press ENTER to play the next hand.'))
    if replay == 'r': main()
    else: next_hand()





#######################################################################################################################
# Resolve() function debugging option.
# Enter any valid combination of cards below:
# debug = 'z'
if debug == 'z':
    community = [c2d,c3h,c3s,cAs,cKh]
    p1.hand = [cKs,c5d]
    p2.hand = [c3c,cQs]
    p1.name = 'ONE'
    p2.name = 'TWO'
    p1.name = f'{Fore.CYAN}{p1.name}{Style.RESET_ALL}'
    p2.name = f'{Fore.MAGENTA}{p2.name}{Style.RESET_ALL}'
    failure = False
    showdown()
# debug = 'x'
if debug == 'x':
    p1.hand, p2.hand, community = [], [], []
    deck = [c2h, c3h, c4h, c5h, c6h, c7h, c8h, c9h, c10h, cJh, cQh, cKh, cAh,
            c2d, c3d, c4d, c5d, c6d, c7d, c8d, c9d, c10d, cJd, cQd, cKd, cAd,
            c2c, c3c, c4c, c5c, c6c, c7c, c8c, c9c, c10c, cJc, cQc, cKc, cAc,
            c2s, c3s, c4s, c5s, c6s, c7s, c8s, c9s, c10s, cJs, cQs, cKs, cAs]

    x = (random.choice(deck))   # Gets p1 and p2 cards
    deck.remove(x)
    y = (random.choice(deck))
    deck.remove(y)
    p1.get_cards(x, y)
    x = (random.choice(deck))
    deck.remove(x)
    y = (random.choice(deck))
    deck.remove(y)
    p2.get_cards(x, y)
    x = random.choice(deck)     # Gets all 5 community cards
    deck.remove(x)
    community.append(x)
    x = random.choice(deck)
    deck.remove(x)
    community.append(x)
    x = random.choice(deck)
    deck.remove(x)
    community.append(x)
    x = random.choice(deck)
    deck.remove(x)
    community.append(x)
    x = random.choice(deck)
    deck.remove(x)
    community.append(x)
    p1.name = 'ONE'
    p2.name = 'TWO'
    p1.name = f'{Fore.CYAN}{p1.name}{Style.RESET_ALL}'
    p2.name = f'{Fore.MAGENTA}{p2.name}{Style.RESET_ALL}'
    failure = False
    showdown()



main()




